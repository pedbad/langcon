"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.2.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from datetime import timedelta
import os
from pathlib import Path
from urllib.parse import urlparse

from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# load .env from repo root
load_dotenv(BASE_DIR.parent / ".env")

ENV = os.getenv("ENV", "dev")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY", "django-insecure-default")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "True").lower() in {"1", "true", "yes", "on"}

ALLOWED_HOSTS = [h.strip() for h in os.getenv("ALLOWED_HOSTS", "localhost,127.0.0.1").split(",")]


# Site identity (fork-friendly: env-driven; no hard-coded brand/domain defaults)
_default_origin = "http://127.0.0.1:8000" if ENV == "dev" else ""
SITE_ORIGIN = os.getenv("SITE_ORIGIN", _default_origin)
SITE_NAME = os.getenv("SITE_NAME", "LangCen Base")


# Application definition

INSTALLED_APPS = [
    # Unfold must come before the default admin
    "unfold",
    # Unfold integration bits (optional but recommended when using import-export)
    "unfold.contrib.import_export",
    "unfold.contrib.filters",
    "unfold.contrib.forms",
    "unfold.contrib.inlines",
    # Django core apps
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    # Third-party apps
    "django_cotton",
    "import_export",
    # "rest_framework",
    # Local apps
    "core.apps.CoreConfig",
    "users.apps.UsersConfig",
]

if DEBUG:
    INSTALLED_APPS += [
        "django_browser_reload",
        "django_extensions",  # dev-only helper tools
    ]

    INTERNAL_IPS = ["127.0.0.1", "::1"]


# ----------------------------------------------------------------------
# Make Unfold/import-export optional in quirky environments
# ----------------------------------------------------------------------
try:
    import unfold  # noqa
except Exception:
    INSTALLED_APPS = [app for app in INSTALLED_APPS if not app.startswith("unfold")]

try:
    import import_export  # noqa
except Exception:
    INSTALLED_APPS = [app for app in INSTALLED_APPS if app != "import_export"]


# Use our custom user model (added below)
AUTH_USER_MODEL = "users.User"


MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DEBUG:
    MIDDLEWARE += ["django_browser_reload.middleware.BrowserReloadMiddleware"]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [
            BASE_DIR / "core" / "templates",  # app-level
            BASE_DIR.parent / "templates",  # project root (your cotton/ folder lives here)
        ],
        "APP_DIRS": False,  # <- use loaders explicitly
        "OPTIONS": {
            "loaders": [
                "django_cotton.cotton_loader.Loader",  # <- must be first
                "django.template.loaders.filesystem.Loader",
                "django.template.loaders.app_directories.Loader",
            ],
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
                "core.context_processors.site_meta",
            ],
        },
    },
]


# Only in production
# Wrap loaders with Djangoâ€™s cached loader in prod to speed up template lookups:
# "loaders": [(
#     "django.template.loaders.cached.Loader",
#     [
#         "django_cotton.cotton_loader.Loader",
#         "django.template.loaders.filesystem.Loader",
#         "django.template.loaders.app_directories.Loader",
#     ],
# )],

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": os.getenv("DB_ENGINE", "django.db.backends.sqlite3"),
        "NAME": os.getenv("DB_NAME", os.path.join(BASE_DIR, "db.sqlite3")),
        "USER": os.getenv("DB_USER", ""),
        "PASSWORD": os.getenv("DB_PASSWORD", ""),
        "HOST": os.getenv("DB_HOST", ""),
        "PORT": os.getenv("DB_PORT", ""),
        "CONN_MAX_AGE": int(os.getenv("DB_CONN_MAX_AGE", "0")),
        "OPTIONS": {
            # Keep it simple to avoid privileged session SETs
            "charset": os.getenv("DB_CHARSET", "utf8mb4"),
        },
        "TEST": {
            "NAME": "test_langcon",
            "CHARSET": os.getenv("DB_CHARSET", "utf8mb4"),
            "COLLATION": os.getenv("DB_COLLATION", "utf8mb4_unicode_ci"),
        },
    }
}




# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = "static/"
STATICFILES_DIRS = [
    BASE_DIR / "core" / "static",  # ðŸ‘ˆ add this
]
STATIC_ROOT = BASE_DIR / "staticfiles"  # for collectstatic in prod

try:
    if SITE_ORIGIN:
        _host = urlparse(SITE_ORIGIN).netloc.split(":")[0]
        if _host and _host not in ALLOWED_HOSTS:
            ALLOWED_HOSTS.append(_host)
except Exception:
    pass


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# --- Email (dev vs prod) ----------------------------------------------------
# Dev: write emails to files (e.g., for password reset testing)
# Prod: switch to SMTP via environment variables

# A fallback domain for emails when no request is available (CLI, Celery, etc.)
SITE_DOMAIN = os.getenv("SITE_DOMAIN", "")

DEFAULT_FROM_EMAIL = os.getenv("DEFAULT_FROM_EMAIL", "no-reply@example.com")
SERVER_EMAIL = os.getenv("SERVER_EMAIL", DEFAULT_FROM_EMAIL)  # for error emails, optional
PASSWORD_RESET_TIMEOUT = int(timedelta(hours=24).total_seconds())

TEACHER_ADMIN_FULL_PERMS = True

if ENV == "dev":
    EMAIL_BACKEND = "django.core.mail.backends.filebased.EmailBackend"
    # Write to repo-root/tmp_emails
    EMAIL_FILE_PATH = BASE_DIR.parent / "tmp_emails"
else:
    # Example SMTP; configure via environment variables in production
    EMAIL_BACKEND = os.getenv("EMAIL_BACKEND", "django.core.mail.backends.smtp.EmailBackend")
    EMAIL_HOST = os.getenv("EMAIL_HOST", "smtp.sendgrid.net")
    EMAIL_PORT = int(os.getenv("EMAIL_PORT", "587"))
    EMAIL_HOST_USER = os.getenv("EMAIL_HOST_USER", "")
    EMAIL_HOST_PASSWORD = os.getenv("EMAIL_HOST_PASSWORD", "")
    EMAIL_USE_TLS = os.getenv("EMAIL_USE_TLS", "1") == "1"


# if youâ€™re behind a proxy/load balancer
# If production sits behind a reverse proxy that sets X-Forwarded-Proto, tell Django to trust it:
# SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")
# USE_X_FORWARDED_HOST = True  # if your proxy sets X-Forwarded-Host correctly


# --- Users: role-based redirects (override per project) ---------------------
USERS_ROLE_REDIRECTS = {
    "student": "users:student_home",
    "teacher": "users:teacher_home",
    "admin": "users:admin_home",  # Django admin login still works at /admin/
}

LOGOUT_REDIRECT_URL = None

# --- django-import-export ----------------------------------------------------
IMPORT_EXPORT_USE_TRANSACTIONS = True
IMPORT_EXPORT_SKIP_ADMIN_LOG = False


# ----------------------------------------------------------------------
# Unfold (Admin) Branding
# ----------------------------------------------------------------------
UNFOLD = {
    "SITE_TITLE": "LangCen Admin",
    "SITE_HEADER": "LangCen Admin",
    # "SITE_URL": "/admin/",
    # 1) where "View site" should go:
    "SITE_URL": "/",  # your main site root (or full URL)
    # 2) ensure the menu entry is shown:
    "SHOW_VIEW_ON_SITE": True,
    # (optional) a dropdown under the site title (top-left) with a link home:
    "SITE_DROPDOWN": [
        {"icon": "home", "title": "Back to site", "link": "/"},
        # Example to open in a new tab:
        # {
        #     "icon": "home",
        #     "title": "Back to site",
        #     "link": "/",
        #     "attrs": {"target": "_blank"},
        # },
    ],
    # Optionally add later:
    # "SITE_LOGO": "core/img/logo.svg",  # must exist under static/
}
